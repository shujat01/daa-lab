1)PASSWORD

#!/bin/bash
valid_username="myusername"
valid_password="mypassword"

read -p "Enter username: " username

read -s -p "Enter password: " password
echo

if [ "$username" == "$valid_username" ]&& [ "$password" == "$valid_password" ]; then
   echo "Valid username and password."
else
   echo "Invalid username or password."
fi

2)ARTHIMATIC CALCULATOR

#!/bin/sh
a=10
b=20
x=”hello”
y=”world”
echo “a+b: $(($a+$b))”
echo “a-b: $(($a-b))”
echo “a%b: $(($a%$b))”
echo “a/b: $(($a/b))”
c=$x$y
echo $c
if ($a==$b)
then
​echo “a is equal to b”
else
​echo “a is not equal to b”
fi


3)UPPER/LOWER CASE

```bash
var_name="THIS IS a TEST"
$ echo "$VAR_NAME" | tr '[:upper:]' '[:lower:]'
$ movie="The Matrix"
$ echo "$movie" | tr '[:lower:]' '[:upper:]'

4)REVERSE

```bash
#!/bin/bash
 
# Store all arguments in an array
args=("$@")
 
# Get the number of arguments
num_args=$#
 
# Print arguments in reverse order
for (( i=num_args-1; i>=0; i-- )); do
   echo "${args[$i]}"
done
```

5)FILE DIRECTORY

```bash
#!/bin/bash
 
# Read file path from user
read -p "Enter a file path: " file_path
 
# Check if the file is a directory
if [ -d "$file_path" ]; then
   echo "The file is a directory."
else
   echo "The file is not a directory."
fi
```


6)PERMISSION TO FILES

```bash
#!/bin/bash
 
# Check if two file names are provided as arguments
if [ $# -ne 2 ]; then
   echo "Error: Please provide exactly two file names as arguments."
   exit 1
fi
 
# Store the file names provided as arguments
file1="$1"
file2="$2"
 
# Check if both files exist
if [ ! -e "$file1" ] || [ ! -e "$file2" ]; then
   echo "Error: One or both of the specified files do not exist."
   exit 1
fi
 
# Get the permissions of both files
perms_file1=$(stat -c "%a" "$file1")
perms_file2=$(stat -c "%a" "$file2")
 
# Compare the permissions of the files
if [ "$perms_file1" = "$perms_file2" ]; then
   echo "The permissions of $file1 and $file2 are similar."
else
   echo "The permissions of $file1 and $file2 are different."
fi
```

7)LEAP YEAR

```bash
#!/bin/bash
 
# Read year from user
read -p "Enter a year: " year
 
# Check if the year is a leap year
if (( year % 4 == 0 && year % 100 != 0 )) || (( year % 400 == 0 )); then
   echo "The year $year is a leap year."
else
   echo "The year $year is not a leap year."
fi
```

8)GCD LCM

echo "Enter the two numbers" 
read a 
read b 
x=$a 
y=$b
while [ $b -ne 0 ]
do
rem='expr $a % $b* 
a=$b 
b=$rem 
done 
ged=$a
echo "The GCD of $x and $y is $ged"
1cm='expr $× I* $y / $ged*
echo "The LCM of $x and $y is $1cm"
 


9)PRIME OR NOT

```bash
#!/bin/bash
 
# Function to check if a number is prime
is_prime() {
   number=$1
   if ((number < 2)); then
       return 1
   fi
 
   # Check divisibility up to the square root of the number
   for ((i = 2; i * i<= number; i++)); do
       if ((number % i == 0)); then
           return 1
       fi
   done
 
   return 0
}
 
# Read the number from the user
read -p "Enter a number: " input_number
 
# Check if the number is prime
if is_prime "$input_number"; then
   echo "$input_number is a prime number."
else
   echo "$input_number is not a prime number."
fi
```
10)PALINDROME

```bash
#!/bin/bash
 
# Read string from user
read -p "Enter a string: " input_string
 
# Remove non-alphanumeric characters and convert to lowercase
clean_string=$(echo "$input_string" | tr -dc '[:alnum:]' | tr '[:upper:]' '[:lower:]')
 
# Reverse the string
reverse_string=$(echo "$clean_string" | rev)
 
# Check if the string is a palindrome
if [ "$clean_string" = "$reverse_string" ]; then
   echo "The string '$input_string' is a palindrome."
else
   echo "The string '$input_string' is not a palindrome."
fi
```

